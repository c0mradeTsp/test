environ({'ALLUSERSPROFILE': 'C:\\ProgramData', 'APPDATA': 'C:\\Users\\21291\\AppData\\Roaming', 'CLASSPATH': 'C:\\Program Files\\Java\\jdk1.8.0_202\\lib;D:\\program\\java', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'COMPUTERNAME': 'WHOAMI', 'COMSPEC': 'C:\\WINDOWS\\system32\\cmd.exe', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'EFC_11180': '1', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'GOPATH': 'C:\\Users\\21291\\go', 'HOMEDRIVE': 'C:', 'HOMEPATH': '\\Users\\21291', 'INCLUDE': 'C:\\Program Files (x86)\\Microsoft Visual Studio\\VC98\\atl\\include;C:\\Program Files (x86)\\Microsoft Visual Studio\\VC98\\mfc\\include;C:\\Program Files (x86)\\Microsoft Visual Studio\\VC98\\include', 'JAVA_HOME': 'C:\\Program Files\\Java\\jdk1.8.0_361', 'LIB': 'C:\\Program Files (x86)\\Microsoft Visual Studio\\VC98\\mfc\\lib;C:\\Program Files (x86)\\Microsoft Visual Studio\\VC98\\lib', 'LOCALAPPDATA': 'C:\\Users\\21291\\AppData\\Local', 'LOGONSERVER': '\\\\WHOAMI', 'MAVEN_HOME': 'D:\\maven\\apache-maven-3.9.1', 'MSDEVDIR': 'C:\\Program Files (x86)\\Microsoft Visual Studio\\Common\\MSDev98', 'NUMBER_OF_PROCESSORS': '8', 'ONEDRIVE': 'C:\\Users\\21291\\OneDrive', 'ONEDRIVECONSUMER': 'C:\\Users\\21291\\OneDrive', 'OS': 'Windows_NT', 'PATH': 'C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;D:\\VMware16\\bin\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Program Files\\NVIDIA Corporation\\NVIDIA NvDLISR;C:\\Program Files (x86)\\Microsoft SQL Server\\100\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\100\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\100\\DTS\\Binn\\;C:\\Program Files\\dotnet\\;C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\110\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\120\\DTS\\Binn\\;C:\\Program Files (x86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\;C:\\Program Files\\Java\\jdk1.8.0_361\\bin;D:\\maven\\apache-maven-3.9.1\\bin\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;D:\\metasploit;C:\\Program Files (x86)\\Go\\bin;D:\\program\\web渗透\\tools\\fscan\\fscan-main;C:\\Program Files\\Git\\cmd;D:\\proxychains;C:\\Users\\21291\\AppData\\Local\\Programs\\Python\\Python37\\Scripts;C:\\Users\\21291\\AppData\\Local\\Programs\\Python\\Python37\\;C:\\Users\\21291\\AppData\\Local\\Programs\\Python\\Python27\\Scripts;C:\\Users\\21291\\AppData\\Local\\Programs\\Python\\Python27\\;C:\\Program Files (x86)\\Microsoft Visual Studio\\Common\\Tools\\WinNT;C:\\Program Files (x86)\\Microsoft Visual Studio\\Common\\MSDev98\\Bin;C:\\Program Files (x86)\\Microsoft Visual Studio\\Common\\Tools;C:\\Program Files (x86)\\Microsoft Visual Studio\\VC98\\bin;C:\\Users\\21291\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\21291\\.dotnet\\tools;C:\\Program Files (x86)\\Nmap;C:\\Users\\21291\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\21291\\AppData\\Local\\Programs\\Python\\Python27\\sqlmap\\;C:\\Users\\21291\\go\\bin;D:\\proxychains', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 140 Stepping 2, GenuineIntel', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_REVISION': '8c02', 'PROGRAMDATA': 'C:\\ProgramData', 'PROGRAMFILES': 'C:\\Program Files', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'PROGRAMW6432': 'C:\\Program Files', 'PROMPT': '$P$G', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\Tools\\PowerShell\\Modules\\', 'PUBLIC': 'C:\\Users\\Public', 'PYTHON27': 'C:\\Users\\21291\\AppData\\Local\\Programs\\Python\\Python27', 'PYTHON37': 'C:\\Users\\21291\\AppData\\Local\\Programs\\Python\\Python37', 'REQUEST_CA_BUNDLE': 'C:\\Program Files\\Git\\usr\\ssl\\certs\\ca-bundle.crt', 'SESSIONNAME': 'Console', 'SQLMAP': 'C:\\Users\\21291\\AppData\\Local\\Programs\\Python\\Python27\\sqlmap', 'SSL_CERT_FILE': 'C:\\Users\\21291\\AppData\\Local\\Programs\\Python\\Python37\\Lib\\site-packages\\certifi\\cacert.pem', 'SYSTEMDRIVE': 'C:', 'SYSTEMROOT': 'C:\\WINDOWS', 'TEMP': 'C:\\Users\\21291\\AppData\\Local\\Temp', 'TMP': 'C:\\Users\\21291\\AppData\\Local\\Temp', 'USERDOMAIN': 'WHOAMI', 'USERDOMAIN_ROAMINGPROFILE': 'WHOAMI', 'USERNAME': '21291', 'USERPROFILE': 'C:\\Users\\21291', 'WINDIR': 'C:\\WINDOWS', 'ZES_ENABLE_SYSMAN': '1', '_NT_SYMBOL_PATH': 'SRV*c:\\mysymbol*\xa0http://msdl.microsoft.com/download/symbols'})